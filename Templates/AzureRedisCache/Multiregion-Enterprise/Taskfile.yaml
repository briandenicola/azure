version: '3'

env:
  TITLE: "Multi-region Azure Redis Enterprise Cache demo"

tasks:
  default:
    cmds: 
    - task --list 

  up:
    desc: Creates {{.TITLE}} Azure infrastructure
    cmds:
    - terraform init
    - terraform apply -auto-approve -var "tags={{.TITLE}}"
    - task: environment 

  refresh:
    desc: Refreshes Terraform state
    cmds:
    - terraform refresh -var "tags={{.TITLE}}" 
  
  environment:
    desc: Creates environment config file for each virtual machine
    cmds:  
    - cmd: rm -rf sshenv || true
      silent: true
    - cmd: echo '{{.SSH_HOSTS}}' | jq -r 'to_entries[] | "export SSH_HOST_\(.key)=\(.value)"' >> sshenv
      silent: true
    - cmd: echo '{{.REDIS_CACHES}}' | jq -r 'to_entries[] | "export REDIS_CACHE_\(.key)=\(.value)"' >> sshenv
      silent: true
    - cmd: echo '{{.REDIS_KEYS}}' | jq -r 'to_entries[] | "export REDIS_KEY_\(.key)=\(.value)"' >> sshenv
      silent: true
    vars:
      SSH_HOSTS:
        sh: terraform output -json PUBLIC_IP_ADDRESS 
      REDIS_KEYS:
        sh: terraform output -json REDIS_ACCESS_KEYS
      REDIS_CACHES:
        sh: terraform output -json REDIS_HOSTS 

  copy:
    desc: Copies the environment config file to each virtual machine
    cmds:
    - for: { var: SSH_HOSTS }
      cmd: scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no sshenv manager@{{.ITEM}}:~/.env 
    vars:
      SSH_HOSTS:
        sh: terraform output -json PUBLIC_IP_ADDRESS  | jq -r '.[]'

  down:
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:
    - az group list --tag Application="{{.TITLE}}" --query "[].name" -o tsv | xargs -ot -n 1 az group delete -y --no-wait -n || true
    - rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info sshenv || true